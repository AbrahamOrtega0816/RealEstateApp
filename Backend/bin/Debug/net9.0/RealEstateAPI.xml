<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RealEstateAPI</name>
    </assembly>
    <members>
        <member name="T:RealEstateAPI.Common.DTOs.ServiceResult`1">
            <summary>
            Generic service result wrapper for consistent API responses
            </summary>
            <typeparam name="T">Type of data returned</typeparam>
        </member>
        <member name="P:RealEstateAPI.Common.DTOs.ServiceResult`1.Success">
            <summary>
            Indicates if the operation was successful
            </summary>
        </member>
        <member name="P:RealEstateAPI.Common.DTOs.ServiceResult`1.Data">
            <summary>
            Data returned from the operation
            </summary>
        </member>
        <member name="P:RealEstateAPI.Common.DTOs.ServiceResult`1.Error">
            <summary>
            Error message if operation failed
            </summary>
        </member>
        <member name="P:RealEstateAPI.Common.DTOs.ServiceResult`1.Errors">
            <summary>
            Additional error details
            </summary>
        </member>
        <member name="M:RealEstateAPI.Common.DTOs.ServiceResult`1.SuccessResult(`0)">
            <summary>
            Creates a successful result with data
            </summary>
            <param name="data">Data to return</param>
            <returns>Successful service result</returns>
        </member>
        <member name="M:RealEstateAPI.Common.DTOs.ServiceResult`1.FailureResult(System.String)">
            <summary>
            Creates a failed result with error message
            </summary>
            <param name="error">Error message</param>
            <returns>Failed service result</returns>
        </member>
        <member name="M:RealEstateAPI.Common.DTOs.ServiceResult`1.FailureResult(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a failed result with multiple errors
            </summary>
            <param name="errors">List of error messages</param>
            <returns>Failed service result</returns>
        </member>
        <member name="T:RealEstateAPI.Common.DTOs.ServiceResult">
            <summary>
            Non-generic service result for operations that don't return data
            </summary>
        </member>
        <member name="M:RealEstateAPI.Common.DTOs.ServiceResult.SuccessResult">
            <summary>
            Creates a successful result without data
            </summary>
            <returns>Successful service result</returns>
        </member>
        <member name="M:RealEstateAPI.Common.DTOs.ServiceResult.FailureResult(System.String)">
            <summary>
            Creates a failed result with error message
            </summary>
            <param name="error">Error message</param>
            <returns>Failed service result</returns>
        </member>
        <member name="T:RealEstateAPI.Configuration.JwtSettings">
            <summary>
            Configuration for JWT tokens
            </summary>
        </member>
        <member name="P:RealEstateAPI.Configuration.JwtSettings.SecretKey">
            <summary>
            Secret key for signing JWT tokens
            </summary>
        </member>
        <member name="P:RealEstateAPI.Configuration.JwtSettings.Issuer">
            <summary>
            Token issuer
            </summary>
        </member>
        <member name="P:RealEstateAPI.Configuration.JwtSettings.Audience">
            <summary>
            Token audience
            </summary>
        </member>
        <member name="P:RealEstateAPI.Configuration.JwtSettings.ExpirationInMinutes">
            <summary>
            Access token expiration time in minutes
            </summary>
        </member>
        <member name="P:RealEstateAPI.Configuration.JwtSettings.RefreshTokenExpirationInDays">
            <summary>
            Refresh token expiration time in days
            </summary>
        </member>
        <member name="T:RealEstateAPI.Configuration.MongoDbSettings">
            <summary>
            Configuration for MongoDB connection
            </summary>
        </member>
        <member name="P:RealEstateAPI.Configuration.MongoDbSettings.ConnectionString">
            <summary>
            MongoDB connection string
            </summary>
        </member>
        <member name="P:RealEstateAPI.Configuration.MongoDbSettings.DatabaseName">
            <summary>
            Database name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Configuration.MongoDbSettings.PropertiesCollectionName">
            <summary>
            Properties collection name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Configuration.MongoDbSettings.OwnersCollectionName">
            <summary>
            Owners collection name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Configuration.MongoDbSettings.PropertyTracesCollectionName">
            <summary>
            Property traces collection name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Configuration.MongoDbSettings.UsersCollectionName">
            <summary>
            Users collection name
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Authentication.Controllers.AuthController">
            <summary>
            Controller for user authentication and authorization
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Controllers.AuthController.Login(RealEstateAPI.Features.Authentication.DTOs.LoginDto)">
            <summary>
            Authenticates a user and returns JWT tokens
            </summary>
            <param name="loginDto">User login credentials</param>
            <returns>Authentication response with tokens</returns>
            <response code="200">Returns the authentication tokens</response>
            <response code="400">If the login data is invalid</response>
            <response code="401">If the credentials are incorrect</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Controllers.AuthController.Register(RealEstateAPI.Features.Authentication.DTOs.RegisterDto)">
            <summary>
            Registers a new user
            </summary>
            <param name="registerDto">User registration data</param>
            <returns>Authentication response with tokens</returns>
            <response code="201">Returns the authentication tokens for the new user</response>
            <response code="400">If the registration data is invalid</response>
            <response code="409">If the user already exists</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Controllers.AuthController.RefreshToken(RealEstateAPI.Features.Authentication.DTOs.RefreshTokenDto)">
            <summary>
            Refreshes the access token using a refresh token
            </summary>
            <param name="refreshTokenDto">Refresh token data</param>
            <returns>New authentication response with tokens</returns>
            <response code="200">Returns the new authentication tokens</response>
            <response code="400">If the refresh token data is invalid</response>
            <response code="401">If the refresh token is invalid or expired</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Controllers.AuthController.RevokeToken(RealEstateAPI.Features.Authentication.DTOs.RefreshTokenDto)">
            <summary>
            Revokes a refresh token (logout)
            </summary>
            <param name="refreshTokenDto">Refresh token to revoke</param>
            <returns>Success status</returns>
            <response code="200">Token revoked successfully</response>
            <response code="400">If the refresh token data is invalid</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Controllers.AuthController.GetProfile">
            <summary>
            Gets the current user's profile information
            </summary>
            <returns>User profile information</returns>
            <response code="200">Returns the user profile</response>
            <response code="401">If the user is not authenticated</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Controllers.AuthController.ValidateToken(System.String)">
            <summary>
            Validates if a JWT token is valid and not expired
            </summary>
            <param name="token">JWT token to validate</param>
            <returns>Token validation result</returns>
            <response code="200">Token is valid</response>
            <response code="400">If the token is invalid or expired</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="T:RealEstateAPI.Features.Authentication.DTOs.AuthResponseDto">
            <summary>
            DTO for authentication response
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.AuthResponseDto.AccessToken">
            <summary>
            JWT access token
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.AuthResponseDto.RefreshToken">
            <summary>
            Refresh token for renewing access token
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.AuthResponseDto.ExpiresAt">
            <summary>
            Token expiration time
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.AuthResponseDto.User">
            <summary>
            User information
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Authentication.DTOs.LoginDto">
            <summary>
            DTO for user login
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.LoginDto.Email">
            <summary>
            User email
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.LoginDto.Password">
            <summary>
            User password
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.LoginDto.RememberMe">
            <summary>
            Remember me option for extended token expiry
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Authentication.DTOs.RefreshTokenDto">
            <summary>
            DTO for refresh token request
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.RefreshTokenDto.RefreshToken">
            <summary>
            Refresh token
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Authentication.DTOs.RegisterDto">
            <summary>
            DTO for user registration
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.RegisterDto.Email">
            <summary>
            User email
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.RegisterDto.Password">
            <summary>
            User password
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.RegisterDto.ConfirmPassword">
            <summary>
            Password confirmation
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.RegisterDto.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.RegisterDto.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.RegisterDto.Role">
            <summary>
            User role (optional, defaults to "User")
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Authentication.DTOs.UserDto">
            <summary>
            DTO for user information (without sensitive data)
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.UserDto.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.UserDto.Email">
            <summary>
            User email
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.UserDto.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.UserDto.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.UserDto.FullName">
            <summary>
            User full name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.UserDto.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.UserDto.Permissions">
            <summary>
            User permissions
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.UserDto.IsActive">
            <summary>
            Account status
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.UserDto.IsEmailVerified">
            <summary>
            Email verification status
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.UserDto.LastLogin">
            <summary>
            Last login date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.DTOs.UserDto.CreatedAt">
            <summary>
            Account creation date
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Authentication.Models.User">
            <summary>
            Represents a user in the MongoDB database
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.Id">
            <summary>
            Unique user identifier in MongoDB
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.Email">
            <summary>
            User email (unique identifier for login)
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.PasswordHash">
            <summary>
            Hashed password using BCrypt
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.Role">
            <summary>
            User role (Admin, User, Manager)
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.Permissions">
            <summary>
            User permissions array for fine-grained access control
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.IsActive">
            <summary>
            Indicates if the user account is active
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.IsEmailVerified">
            <summary>
            Indicates if the user email is verified
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.LastLogin">
            <summary>
            Last login timestamp
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.RefreshToken">
            <summary>
            Refresh token for JWT renewal
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.RefreshTokenExpiry">
            <summary>
            Refresh token expiration date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.FailedLoginAttempts">
            <summary>
            Failed login attempts counter
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.LockoutEnd">
            <summary>
            Account lockout until timestamp
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.CreatedAt">
            <summary>
            Record creation date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.UpdatedAt">
            <summary>
            Last update date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Authentication.Models.User.Metadata">
            <summary>
            Additional metadata stored as flexible document
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Authentication.Services.IJwtService">
            <summary>
            Interface for JWT token service
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IJwtService.GenerateAccessToken(RealEstateAPI.Features.Authentication.Models.User)">
            <summary>
            Generates a JWT access token for the user
            </summary>
            <param name="user">User information</param>
            <returns>JWT token string</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IJwtService.GenerateRefreshToken">
            <summary>
            Generates a refresh token
            </summary>
            <returns>Refresh token string</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IJwtService.ValidateToken(System.String)">
            <summary>
            Validates a JWT token and returns claims principal
            </summary>
            <param name="token">JWT token to validate</param>
            <returns>Claims principal if valid, null otherwise</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IJwtService.GetUserIdFromToken(System.String)">
            <summary>
            Gets user ID from JWT token
            </summary>
            <param name="token">JWT token</param>
            <returns>User ID if valid token, null otherwise</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IJwtService.GetTokenExpiration(System.String)">
            <summary>
            Gets token expiration date
            </summary>
            <param name="token">JWT token</param>
            <returns>Expiration date if valid token, null otherwise</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IJwtService.IsTokenExpired(System.String)">
            <summary>
            Checks if token is expired
            </summary>
            <param name="token">JWT token</param>
            <returns>True if expired, false otherwise</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IJwtService.LoginAsync(RealEstateAPI.Features.Authentication.DTOs.LoginDto)">
            <summary>
            Authenticates user login credentials
            </summary>
            <param name="loginDto">User login credentials</param>
            <returns>Authentication response with tokens</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IJwtService.RegisterAsync(RealEstateAPI.Features.Authentication.DTOs.RegisterDto)">
            <summary>
            Registers a new user
            </summary>
            <param name="registerDto">User registration data</param>
            <returns>Authentication response with tokens</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IJwtService.RefreshTokenAsync(RealEstateAPI.Features.Authentication.DTOs.RefreshTokenDto)">
            <summary>
            Refreshes access token using refresh token
            </summary>
            <param name="refreshTokenDto">Refresh token data</param>
            <returns>New authentication response with tokens</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IJwtService.RevokeTokenAsync(System.String)">
            <summary>
            Revokes a refresh token
            </summary>
            <param name="token">Refresh token to revoke</param>
            <returns>True if revoked successfully</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IJwtService.GetCurrentUserAsync(System.String)">
            <summary>
            Gets current authenticated user information
            </summary>
            <param name="userId">User ID from token</param>
            <returns>Current user data</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IJwtService.ValidateTokenAsync(System.String)">
            <summary>
            Validates token asynchronously
            </summary>
            <param name="token">JWT token to validate</param>
            <returns>True if token is valid</returns>
        </member>
        <member name="T:RealEstateAPI.Features.Authentication.Services.IUserService">
            <summary>
            Interface for user management operations
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IUserService.CreateUserAsync(RealEstateAPI.Features.Authentication.Models.User)">
            <summary>
            Creates a new user in the database
            </summary>
            <param name="user">User to create</param>
            <returns>Created user</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IUserService.GetUserByEmailAsync(System.String)">
            <summary>
            Gets a user by email
            </summary>
            <param name="email">User email</param>
            <returns>User if found, null otherwise</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IUserService.GetUserByIdAsync(System.String)">
            <summary>
            Gets a user by ID
            </summary>
            <param name="id">User ID</param>
            <returns>User if found, null otherwise</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IUserService.UpdateUserAsync(RealEstateAPI.Features.Authentication.Models.User)">
            <summary>
            Updates a user's information
            </summary>
            <param name="user">User to update</param>
            <returns>Updated user</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IUserService.UpdateRefreshTokenAsync(System.String,System.String,System.DateTime)">
            <summary>
            Updates user's refresh token
            </summary>
            <param name="userId">User ID</param>
            <param name="refreshToken">New refresh token</param>
            <param name="refreshTokenExpiry">Token expiry date</param>
            <returns>Success status</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IUserService.GetUserByRefreshTokenAsync(System.String)">
            <summary>
            Gets user by refresh token
            </summary>
            <param name="refreshToken">Refresh token</param>
            <returns>User if found, null otherwise</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IUserService.UpdateLastLoginAsync(System.String)">
            <summary>
            Updates user's last login time
            </summary>
            <param name="userId">User ID</param>
            <returns>Success status</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IUserService.IncrementFailedLoginAttemptsAsync(System.String)">
            <summary>
            Increments failed login attempts
            </summary>
            <param name="userId">User ID</param>
            <returns>Success status</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IUserService.ResetFailedLoginAttemptsAsync(System.String)">
            <summary>
            Resets failed login attempts
            </summary>
            <param name="userId">User ID</param>
            <returns>Success status</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.IUserService.LockUserAccountAsync(System.String,System.DateTime)">
            <summary>
            Locks user account
            </summary>
            <param name="userId">User ID</param>
            <param name="lockoutEnd">Lockout end time</param>
            <returns>Success status</returns>
        </member>
        <member name="T:RealEstateAPI.Features.Authentication.Services.JwtService">
            <summary>
            JWT service implementation for authentication and token management
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.JwtService.UpdateRefreshTokenAsync(System.String,System.String,System.Boolean)">
            <summary>
            Updates user's refresh token
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.JwtService.MapToUserDto(RealEstateAPI.Features.Authentication.Models.User)">
            <summary>
            Maps User entity to UserDto
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Authentication.Services.UserService">
            <summary>
            Service for managing users in MongoDB
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Authentication.Services.UserService.CreateIndexes">
            <summary>
            Creates indexes in MongoDB to optimize queries
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Owners.Controllers.OwnersController">
            <summary>
            Controller for managing owners
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Owners.Controllers.OwnersController.GetOwners(System.Int32,System.Int32)">
            <summary>
            Gets all owners with pagination
            </summary>
            <param name="pageNumber">Page number (default: 1)</param>
            <param name="pageSize">Page size (default: 10, max: 100)</param>
            <returns>Paginated list of owners</returns>
            <response code="200">Returns the paginated list of owners</response>
            <response code="400">If the request parameters are invalid</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Owners.Controllers.OwnersController.GetOwner(System.String)">
            <summary>
            Gets a specific owner by ID
            </summary>
            <param name="id">Owner ID</param>
            <returns>Owner details</returns>
            <response code="200">Returns the owner</response>
            <response code="404">If the owner is not found</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Owners.Controllers.OwnersController.CreateOwner(RealEstateAPI.Features.Owners.DTOs.CreateOwnerDto)">
            <summary>
            Creates a new owner
            </summary>
            <param name="createOwnerDto">Owner creation data</param>
            <returns>Created owner</returns>
            <response code="201">Returns the newly created owner</response>
            <response code="400">If the owner data is invalid</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Owners.Controllers.OwnersController.UpdateOwner(System.String,RealEstateAPI.Features.Owners.DTOs.CreateOwnerDto)">
            <summary>
            Updates an existing owner
            </summary>
            <param name="id">Owner ID</param>
            <param name="updateOwnerDto">Owner update data</param>
            <returns>Updated owner</returns>
            <response code="200">Returns the updated owner</response>
            <response code="400">If the owner data is invalid</response>
            <response code="404">If the owner is not found</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Owners.Controllers.OwnersController.DeleteOwner(System.String)">
            <summary>
            Deletes an owner (soft delete)
            </summary>
            <param name="id">Owner ID</param>
            <returns>Success status</returns>
            <response code="204">Owner deleted successfully</response>
            <response code="404">If the owner is not found</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="T:RealEstateAPI.Features.Owners.DTOs.CreateOwnerDto">
            <summary>
            DTO for creating new owners
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.DTOs.CreateOwnerDto.Name">
            <summary>
            Owner name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.DTOs.CreateOwnerDto.Address">
            <summary>
            Owner address
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.DTOs.CreateOwnerDto.Photo">
            <summary>
            Owner photo URL
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.DTOs.CreateOwnerDto.Birthday">
            <summary>
            Owner birthday
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Owners.DTOs.OwnerDto">
            <summary>
            DTO for transferring owner information
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.DTOs.OwnerDto.Id">
            <summary>
            Unique owner identifier
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.DTOs.OwnerDto.Name">
            <summary>
            Owner name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.DTOs.OwnerDto.Address">
            <summary>
            Owner address
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.DTOs.OwnerDto.Photo">
            <summary>
            Owner photo URL
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.DTOs.OwnerDto.Birthday">
            <summary>
            Owner birthday
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.DTOs.OwnerDto.CreatedAt">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.DTOs.OwnerDto.UpdatedAt">
            <summary>
            Update date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.DTOs.OwnerDto.IsActive">
            <summary>
            Owner status
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Owners.Models.Owner">
            <summary>
            Represents an owner in the MongoDB database
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.Models.Owner.Id">
            <summary>
            Unique owner identifier in MongoDB
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.Models.Owner.Name">
            <summary>
            Owner name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.Models.Owner.Address">
            <summary>
            Owner address
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.Models.Owner.Photo">
            <summary>
            Owner photo URL
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.Models.Owner.Birthday">
            <summary>
            Owner birthday
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.Models.Owner.CreatedAt">
            <summary>
            Record creation date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.Models.Owner.UpdatedAt">
            <summary>
            Last update date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Owners.Models.Owner.IsActive">
            <summary>
            Indicates if the owner is active
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Owners.Services.IOwnerService">
            <summary>
            Interface for owner service operations
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Owners.Services.IOwnerService.GetOwnersAsync(System.Int32,System.Int32)">
            <summary>
            Gets all owners with pagination
            </summary>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page size</param>
            <returns>Paginated list of owners</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Owners.Services.IOwnerService.GetOwnerByIdAsync(System.String)">
            <summary>
            Gets an owner by ID
            </summary>
            <param name="id">Owner ID</param>
            <returns>Owner if found, null otherwise</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Owners.Services.IOwnerService.CreateOwnerAsync(RealEstateAPI.Features.Owners.DTOs.CreateOwnerDto)">
            <summary>
            Creates a new owner
            </summary>
            <param name="createOwnerDto">Owner creation data</param>
            <returns>Created owner</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Owners.Services.IOwnerService.UpdateOwnerAsync(System.String,RealEstateAPI.Features.Owners.DTOs.CreateOwnerDto)">
            <summary>
            Updates an existing owner
            </summary>
            <param name="id">Owner ID</param>
            <param name="updateOwnerDto">Owner update data</param>
            <returns>Updated owner if found, null otherwise</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Owners.Services.IOwnerService.DeleteOwnerAsync(System.String)">
            <summary>
            Deletes an owner (soft delete)
            </summary>
            <param name="id">Owner ID</param>
            <returns>True if deleted successfully, false otherwise</returns>
        </member>
        <member name="T:RealEstateAPI.Features.Owners.Services.OwnerService">
            <summary>
            Service for managing owners in MongoDB
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Owners.Services.OwnerService.CreateIndexes">
            <summary>
            Creates indexes in MongoDB to optimize queries
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Owners.Services.OwnerService.MapToDto(RealEstateAPI.Features.Owners.Models.Owner)">
            <summary>
            Maps an Owner entity to OwnerDto
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Properties.Controllers.PropertiesController">
            <summary>
            Controller for managing properties
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Controllers.PropertiesController.GetProperties(RealEstateAPI.Features.Properties.DTOs.PropertyFilterDto)">
            <summary>
            Gets all properties with pagination and filtering
            </summary>
            <param name="filter">Filter criteria for properties</param>
            <returns>Paginated list of properties</returns>
            <response code="200">Returns the paginated list of properties</response>
            <response code="400">If the request parameters are invalid</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Controllers.PropertiesController.GetProperty(System.String)">
            <summary>
            Gets a specific property by ID
            </summary>
            <param name="id">Property ID</param>
            <returns>Property details</returns>
            <response code="200">Returns the property</response>
            <response code="404">If the property is not found</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Controllers.PropertiesController.CreateProperty(RealEstateAPI.Features.Properties.DTOs.CreatePropertyDto)">
            <summary>
            Creates a new property
            </summary>
            <param name="createPropertyDto">Property creation data</param>
            <returns>Created property</returns>
            <response code="201">Returns the newly created property</response>
            <response code="400">If the property data is invalid</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Controllers.PropertiesController.UpdateProperty(System.String,RealEstateAPI.Features.Properties.DTOs.CreatePropertyDto)">
            <summary>
            Updates an existing property
            </summary>
            <param name="id">Property ID</param>
            <param name="updatePropertyDto">Property update data</param>
            <returns>Updated property</returns>
            <response code="200">Returns the updated property</response>
            <response code="400">If the property data is invalid</response>
            <response code="404">If the property is not found</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Controllers.PropertiesController.DeleteProperty(System.String)">
            <summary>
            Deletes a property (soft delete)
            </summary>
            <param name="id">Property ID</param>
            <returns>Success status</returns>
            <response code="204">Property deleted successfully</response>
            <response code="404">If the property is not found</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Controllers.PropertiesController.ChangePriceProperty(System.String,System.Decimal)">
            <summary>
            Change property price with trace
            </summary>
            <param name="id">Property ID</param>
            <param name="newPrice">New property price</param>
            <returns>Updated property</returns>
            <response code="200">Returns the property with updated price</response>
            <response code="400">If the price is invalid</response>
            <response code="404">If the property is not found</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="T:RealEstateAPI.Features.Properties.DTOs.CreatePropertyDto">
            <summary>
            DTO for creating new properties
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.CreatePropertyDto.IdOwner">
            <summary>
            Owner identifier
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.CreatePropertyDto.Name">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.CreatePropertyDto.Address">
            <summary>
            Property address
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.CreatePropertyDto.Price">
            <summary>
            Property price
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.CreatePropertyDto.Image">
            <summary>
            Property image URL
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.CreatePropertyDto.CodeInternal">
            <summary>
            Internal property code
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.CreatePropertyDto.Year">
            <summary>
            Property year of construction
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Properties.DTOs.PropertyDto">
            <summary>
            DTO for transferring property information
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyDto.Id">
            <summary>
            Unique property identifier
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyDto.IdOwner">
            <summary>
            Owner identifier
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyDto.Name">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyDto.Address">
            <summary>
            Property address
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyDto.Price">
            <summary>
            Property price
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyDto.Image">
            <summary>
            Property image URL
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyDto.CodeInternal">
            <summary>
            Internal property code
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyDto.Year">
            <summary>
            Property year of construction
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyDto.CreatedAt">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyDto.UpdatedAt">
            <summary>
            Update date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyDto.IsActive">
            <summary>
            Property status
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Properties.DTOs.PropertyFilterDto">
            <summary>
            DTO for filtering properties
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyFilterDto.Name">
            <summary>
            Filter by property name (partial search)
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyFilterDto.Address">
            <summary>
            Filter by address (partial search)
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyFilterDto.MinPrice">
            <summary>
            Minimum price for filter
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyFilterDto.MaxPrice">
            <summary>
            Maximum price for filter
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyFilterDto.PageNumber">
            <summary>
            Page number for pagination (default 1)
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyFilterDto.PageSize">
            <summary>
            Page size for pagination (default 10, maximum 100)
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyFilterDto.SortBy">
            <summary>
            Field to sort by (name, address, price, createdAt)
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.DTOs.PropertyFilterDto.SortDirection">
            <summary>
            Sort direction (asc, desc)
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Properties.Models.Property">
            <summary>
            Represents a real estate property in the MongoDB database
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.Models.Property.Id">
            <summary>
            Unique property identifier in MongoDB
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.Models.Property.IdOwner">
            <summary>
            Owner identifier
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.Models.Property.Name">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.Models.Property.Address">
            <summary>
            Property address
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.Models.Property.Price">
            <summary>
            Property price
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.Models.Property.Image">
            <summary>
            Property image URL
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.Models.Property.CodeInternal">
            <summary>
            Internal property code
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.Models.Property.Year">
            <summary>
            Property year of construction
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.Models.Property.CreatedAt">
            <summary>
            Record creation date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.Models.Property.UpdatedAt">
            <summary>
            Last update date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Properties.Models.Property.IsActive">
            <summary>
            Indicates if the property is active
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Properties.Services.IPropertyService">
            <summary>
            Interface for the property service
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Services.IPropertyService.GetPropertiesAsync(RealEstateAPI.Features.Properties.DTOs.PropertyFilterDto)">
            <summary>
            Gets all properties with filters and pagination
            </summary>
            <param name="filter">Search filters</param>
            <returns>Paginated result of properties</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Services.IPropertyService.GetPropertyByIdAsync(System.String)">
            <summary>
            Gets a property by its ID
            </summary>
            <param name="id">Property ID</param>
            <returns>Found property or null</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Services.IPropertyService.CreatePropertyAsync(RealEstateAPI.Features.Properties.DTOs.CreatePropertyDto)">
            <summary>
            Creates a new property
            </summary>
            <param name="createPropertyDto">New property data</param>
            <returns>Created property</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Services.IPropertyService.UpdatePropertyAsync(System.String,RealEstateAPI.Features.Properties.DTOs.CreatePropertyDto)">
            <summary>
            Updates an existing property
            </summary>
            <param name="id">Property ID</param>
            <param name="updatePropertyDto">Updated data</param>
            <returns>Updated property or null if not exists</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Services.IPropertyService.DeletePropertyAsync(System.String)">
            <summary>
            Deletes a property (soft delete)
            </summary>
            <param name="id">Property ID</param>
            <returns>True if deleted successfully</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Services.IPropertyService.ChangePricePropertyAsync(System.String,System.Decimal)">
            <summary>
            Changes the price of an existing property
            </summary>
            <param name="id">Property ID</param>
            <param name="newPrice">New price for the property</param>
            <returns>Updated property with new price or null if not exists</returns>
        </member>
        <member name="T:RealEstateAPI.Features.Properties.Services.PropertyService">
            <summary>
            Service for managing properties in MongoDB
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Services.PropertyService.CreateIndexes">
            <summary>
            Creates indexes in MongoDB to optimize queries
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Services.PropertyService.GetSortDefinition(System.String,System.String)">
            <summary>
            Gets the sort definition based on parameters
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Properties.Services.PropertyService.MapToDto(RealEstateAPI.Features.Properties.Models.Property)">
            <summary>
            Maps a Property entity to PropertyDto
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.PropertyTraces.Controllers.PropertyTracesController">
            <summary>
            Controller for managing property traces (transaction history)
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Controllers.PropertyTracesController.GetPropertyTraces(System.String)">
            <summary>
            Gets all traces for a specific property
            </summary>
            <param name="propertyId">Property ID</param>
            <returns>List of property traces</returns>
            <response code="200">Returns the list of property traces</response>
            <response code="404">If the property is not found</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Controllers.PropertyTracesController.GetPropertyTrace(System.String)">
            <summary>
            Gets a specific property trace by ID
            </summary>
            <param name="id">Property trace ID</param>
            <returns>Property trace details</returns>
            <response code="200">Returns the property trace</response>
            <response code="404">If the property trace is not found</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Controllers.PropertyTracesController.CreatePropertyTrace(RealEstateAPI.Features.PropertyTraces.DTOs.CreatePropertyTraceDto)">
            <summary>
            Creates a new property trace
            </summary>
            <param name="createPropertyTraceDto">Property trace creation data</param>
            <returns>Created property trace</returns>
            <response code="201">Returns the newly created property trace</response>
            <response code="400">If the property trace data is invalid</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Controllers.PropertyTracesController.UpdatePropertyTrace(System.String,RealEstateAPI.Features.PropertyTraces.DTOs.CreatePropertyTraceDto)">
            <summary>
            Updates an existing property trace
            </summary>
            <param name="id">Property trace ID</param>
            <param name="updatePropertyTraceDto">Property trace update data</param>
            <returns>Updated property trace</returns>
            <response code="200">Returns the updated property trace</response>
            <response code="400">If the property trace data is invalid</response>
            <response code="404">If the property trace is not found</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Controllers.PropertyTracesController.DeletePropertyTrace(System.String)">
            <summary>
            Deletes a property trace
            </summary>
            <param name="id">Property trace ID</param>
            <returns>Success status</returns>
            <response code="204">Property trace deleted successfully</response>
            <response code="404">If the property trace is not found</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Controllers.PropertyTracesController.GetPropertyTracesByDateRange(System.String,System.DateTime,System.DateTime)">
            <summary>
            Gets property traces within a date range
            </summary>
            <param name="propertyId">Property ID</param>
            <param name="startDate">Start date for the range</param>
            <param name="endDate">End date for the range</param>
            <returns>List of property traces within the date range</returns>
            <response code="200">Returns the list of property traces</response>
            <response code="400">If the date range is invalid</response>
            <response code="500">If there was an internal server error</response>
        </member>
        <member name="T:RealEstateAPI.Features.PropertyTraces.DTOs.CreatePropertyTraceDto">
            <summary>
            DTO for creating new property traces
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.DTOs.CreatePropertyTraceDto.DateSale">
            <summary>
            Date of the sale/transaction
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.DTOs.CreatePropertyTraceDto.Name">
            <summary>
            Transaction name or description
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.DTOs.CreatePropertyTraceDto.Value">
            <summary>
            Transaction value
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.DTOs.CreatePropertyTraceDto.Tax">
            <summary>
            Tax amount
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.DTOs.CreatePropertyTraceDto.IdProperty">
            <summary>
            Property identifier
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.PropertyTraces.DTOs.PropertyTraceDto">
            <summary>
            DTO for transferring property trace information
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.DTOs.PropertyTraceDto.Id">
            <summary>
            Unique property trace identifier
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.DTOs.PropertyTraceDto.DateSale">
            <summary>
            Date of the sale/transaction
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.DTOs.PropertyTraceDto.Name">
            <summary>
            Transaction name or description
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.DTOs.PropertyTraceDto.Value">
            <summary>
            Transaction value
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.DTOs.PropertyTraceDto.Tax">
            <summary>
            Tax amount
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.DTOs.PropertyTraceDto.IdProperty">
            <summary>
            Property identifier
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.DTOs.PropertyTraceDto.CreatedAt">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.DTOs.PropertyTraceDto.UpdatedAt">
            <summary>
            Update date
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.PropertyTraces.Models.PropertyTrace">
            <summary>
            Represents a property trace/transaction in the MongoDB database
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.Models.PropertyTrace.Id">
            <summary>
            Unique property trace identifier in MongoDB
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.Models.PropertyTrace.DateSale">
            <summary>
            Date of the sale/transaction
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.Models.PropertyTrace.Name">
            <summary>
            Transaction name or description
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.Models.PropertyTrace.Value">
            <summary>
            Transaction value
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.Models.PropertyTrace.Tax">
            <summary>
            Tax amount
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.Models.PropertyTrace.IdProperty">
            <summary>
            Property identifier
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.Models.PropertyTrace.CreatedAt">
            <summary>
            Record creation date
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.PropertyTraces.Models.PropertyTrace.UpdatedAt">
            <summary>
            Last update date
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.PropertyTraces.Services.IPropertyTraceService">
            <summary>
            Interface for property trace service operations
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Services.IPropertyTraceService.GetTracesByPropertyIdAsync(System.String)">
            <summary>
            Gets all traces for a specific property
            </summary>
            <param name="propertyId">Property ID</param>
            <returns>List of property traces</returns>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Services.IPropertyTraceService.GetTraceByIdAsync(System.String)">
            <summary>
            Gets a property trace by ID
            </summary>
            <param name="id">Trace ID</param>
            <returns>Property trace if found, null otherwise</returns>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Services.IPropertyTraceService.CreateTraceAsync(RealEstateAPI.Features.PropertyTraces.DTOs.CreatePropertyTraceDto)">
            <summary>
            Creates a new property trace
            </summary>
            <param name="createTraceDto">Trace creation data</param>
            <returns>Created property trace</returns>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Services.IPropertyTraceService.UpdateTraceAsync(System.String,RealEstateAPI.Features.PropertyTraces.DTOs.CreatePropertyTraceDto)">
            <summary>
            Updates an existing property trace
            </summary>
            <param name="id">Trace ID</param>
            <param name="updateTraceDto">Trace update data</param>
            <returns>Updated property trace if found, null otherwise</returns>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Services.IPropertyTraceService.DeleteTraceAsync(System.String)">
            <summary>
            Deletes a property trace
            </summary>
            <param name="id">Trace ID</param>
            <returns>True if deleted successfully, false otherwise</returns>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Services.IPropertyTraceService.GetTracesByDateRangeAsync(System.String,System.DateTime,System.DateTime)">
            <summary>
            Gets property traces within a date range for a specific property
            </summary>
            <param name="propertyId">Property ID</param>
            <param name="startDate">Start date for filtering</param>
            <param name="endDate">End date for filtering</param>
            <returns>List of property traces within the date range</returns>
        </member>
        <member name="T:RealEstateAPI.Features.PropertyTraces.Services.PropertyTraceService">
            <summary>
            Service for managing property traces in MongoDB
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Services.PropertyTraceService.CreateIndexes">
            <summary>
            Creates indexes in MongoDB to optimize queries
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.PropertyTraces.Services.PropertyTraceService.MapToDto(RealEstateAPI.Features.PropertyTraces.Models.PropertyTrace)">
            <summary>
            Maps a PropertyTrace entity to PropertyTraceDto
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Shared.Controllers.DiagnosticController">
            <summary>
            Controller for system diagnostics
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Shared.Controllers.DiagnosticController.GetHealth">
            <summary>
            Checks the general API status
            </summary>
            <returns>API status</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Shared.Controllers.DiagnosticController.TestMongoDbConnection">
            <summary>
            Verifies MongoDB connection
            </summary>
            <returns>MongoDB connection status</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Shared.Controllers.DiagnosticController.TestMongoDbCollections">
            <summary>
            Verifies MongoDB collections status
            </summary>
            <returns>Collections status</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Shared.Controllers.DiagnosticController.FullMongoDbTest">
            <summary>
            Complete database system test
            </summary>
            <returns>Complete test results</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Shared.Controllers.DiagnosticController.GetConfiguration">
            <summary>
            Gets configuration information (without sensitive data)
            </summary>
            <returns>Configuration information</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Shared.Controllers.DiagnosticController.MaskConnectionString(System.String)">
            <summary>
            Masks the connection string to avoid exposing credentials
            </summary>
            <param name="connectionString">Original connection string</param>
            <returns>Masked connection string</returns>
        </member>
        <member name="T:RealEstateAPI.Features.Shared.DTOs.PagedResultDto`1">
            <summary>
            DTO for paginated results
            </summary>
            <typeparam name="T">Tipo de datos en la colección</typeparam>
        </member>
        <member name="P:RealEstateAPI.Features.Shared.DTOs.PagedResultDto`1.Items">
            <summary>
            List of items in the current page
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Shared.DTOs.PagedResultDto`1.TotalCount">
            <summary>
            Total number of items
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Shared.DTOs.PagedResultDto`1.PageNumber">
            <summary>
            Current page number
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Shared.DTOs.PagedResultDto`1.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Shared.DTOs.PagedResultDto`1.TotalPages">
            <summary>
            Total number of pages
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Shared.DTOs.PagedResultDto`1.HasPreviousPage">
            <summary>
            Indicates if there is a previous page
            </summary>
        </member>
        <member name="P:RealEstateAPI.Features.Shared.DTOs.PagedResultDto`1.HasNextPage">
            <summary>
            Indicates if there is a next page
            </summary>
        </member>
        <member name="T:RealEstateAPI.Features.Shared.Services.IMongoDbStartupService">
            <summary>
            Service for MongoDB startup verification and health checks
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Shared.Services.IMongoDbStartupService.VerifyConnectionAsync">
            <summary>
            Verifies MongoDB connection during application startup
            </summary>
            <returns>Task representing the verification operation</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Shared.Services.IMongoDbStartupService.GetConnectionInfoAsync">
            <summary>
            Gets MongoDB connection information
            </summary>
            <returns>Connection information object</returns>
        </member>
        <member name="M:RealEstateAPI.Features.Shared.Services.IMongoDbStartupService.IsAccessibleAsync">
            <summary>
            Checks if MongoDB is accessible
            </summary>
            <returns>True if accessible, false otherwise</returns>
        </member>
        <member name="T:RealEstateAPI.Features.Shared.Services.MongoDbStartupService">
            <summary>
            Service for MongoDB startup verification and health checks
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Shared.Services.MongoDbStartupService.VerifyConnectionAsync">
            <summary>
            Verifies MongoDB connection during application startup
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Shared.Services.MongoDbStartupService.GetConnectionInfoAsync">
            <summary>
            Gets MongoDB connection information
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Shared.Services.MongoDbStartupService.IsAccessibleAsync">
            <summary>
            Checks if MongoDB is accessible
            </summary>
        </member>
        <member name="M:RealEstateAPI.Features.Shared.Services.MongoDbStartupService.CreateMongoClient">
            <summary>
            Creates a MongoDB client with SSL configuration optimized for macOS
            </summary>
        </member>
    </members>
</doc>
